package com.honeywell.forge.controller;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.github.fge.jsonpatch.JsonPatch;
import com.github.fge.jsonpatch.JsonPatchException;
import com.lab.gled.model.Document;
import org.springframework.ui.Model;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import com.lab.gled.repository.DocumentRepository;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;
import java.util.List;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.reactive.function.client.WebClient;

/**
 *
 * @author gledson
 */
@RestController
@RequestMapping("/api")
public class MetadataApi {

    @Autowired
    DocumentRepository contentRepository;

    @Autowired
    ObjectMapper objectMapper;
    
    //@Autowired
    WebClient webclient;

    @GetMapping("/contents")
    public ResponseEntity findAllMetadata(Model model) throws JsonProcessingException {

        objectMapper.configure(SerializationFeature.INDENT_OUTPUT, true);

        return new ResponseEntity<>(contentRepository.findAll(), HttpStatus.OK);
    }

    @PutMapping("/content/")
    public ResponseEntity<String> addContent(/*@Valid*/@RequestBody String json) throws JsonProcessingException, IOException {

        Document document = objectMapper.readValue(json, Document.class);

        contentRepository.save(document);

        return new ResponseEntity<>("Content was created successfully.", HttpStatus.OK);

    }

    @PutMapping(path = "/media/json", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<?> addMedia(/*@Valid*/@RequestParam("jsonFile") MultipartFile file) {
        
    
        
        return new ResponseEntity<>("Content was created successfully.", HttpStatus.CREATED);

    }

    @PatchMapping(path = "/contents/{name}", consumes = "application/json-patch+json")
    public Document updatePartially(@RequestBody JsonPatch jp, Document target) throws JsonPatchException, IllegalArgumentException, JsonProcessingException { 
       JsonNode ptc = jp.apply(objectMapper.convertValue(target, JsonNode.class));
       
       System.out.println(ptc);
        
        return objectMapper.treeToValue(ptc, Document.class);
        
       

    }
    
    @PatchMapping(path = "/Document/{name}", consumes = "application/json-patch+json")
    public ResponseEntity<Document> applyDoc(@PathVariable String name, @RequestBody JsonPatch patch) throws JsonPatchException, JsonProcessingException {
        
       Document document = contentRepository.findByModelName(name);
        
       Document customerPatched = applyPatch(patch, document);
       
       System.out.print(document);
       
       System.out.print(customerPatched);
       
       contentRepository.save(customerPatched);
    
       return ResponseEntity.ok(customerPatched);
    
     }
    
    
    private Document applyPatch(
    JsonPatch patch, Document targetCustomer) throws JsonPatchException, JsonProcessingException {
    JsonNode patched = patch.apply(objectMapper.convertValue(targetCustomer, JsonNode.class));
    return objectMapper.treeToValue(patched, Document.class);
}
    
    
    
    
    
    
    

}

//https://cassiomolin.com/2019/06/10/using-http-patch-in-spring/

